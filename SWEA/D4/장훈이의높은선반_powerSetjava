package SWEA.D4;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class 장훈이의높은선반_powerSet {
	static int N, B, minDiff;
	static int[] height;
	static boolean[] visited;

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		int T = Integer.parseInt(br.readLine());
		for (int tc = 1; tc <= T; tc++) {
			st = new StringTokenizer(br.readLine());
			N = Integer.parseInt(st.nextToken());
			B = Integer.parseInt(st.nextToken());
			height = new int[N];
			st = new StringTokenizer(br.readLine());
			for (int i = 0; i < N; i++) {
				height[i] = Integer.parseInt(st.nextToken());
			}
			minDiff = Integer.MAX_VALUE;
			visited = new boolean[N];
			dfs(0);
			System.out.println("#" + tc + " " + minDiff);
		}

	}

	static void dfs(int cnt) {
		if (cnt == N) {
			int sum = 0;
			for (int i = 0; i < N; i++) {
				if (visited[i]) {
					sum += height[i];
				}
			}
			if (sum >= B) {
				minDiff = Math.min(minDiff, sum - B);
			}
			return;
		}
		visited[cnt] = true;
		dfs(cnt + 1);
		visited[cnt] = false;
		dfs(cnt + 1);
	}
}